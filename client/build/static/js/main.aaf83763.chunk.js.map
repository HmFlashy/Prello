{"version":3,"sources":["logo.svg","config/UrlConfig.js","config/HeaderHelper.js","services/ListServices.js","services/CardServices.js","components/App/Card/CardOverview/CardOverview.jsx","containers/CardContainers/CardOverviewContainer.js","redux/actions/CardActions.js","components/App/List/List.jsx","containers/ListContainers/ListContainer.js","redux/actions/ListActions.js","components/App/List/NewList/NewList.jsx","containers/ListContainers/NewListContainer.js","components/App/Board/Board/Board.jsx","services/SocketService.js","services/BoardServices.js","redux/actions/BoardActions.js","containers/BoardContainer/BoardContainer.js","components/App/Board/BoardOverview/BoardOverview.jsx","containers/BoardContainer/BoardOverviewContainer.js","components/App/Board/ListBoards/ListBoards.jsx","containers/BoardContainer/ListBoardContainer.js","App.js","serviceWorker.js","redux/reducers/CardReducer.js","redux/reducers/BoardReducer.js","redux/reducers/ListReducer.js","redux/reducers/RootReducer.js","index.js","redux/store.js"],"names":["module","exports","__webpack_require__","p","API","process","SOCKET","tokenHeader","Access-Control-Allow-Origin","ListServices","updateListNameApi","_updateListNameApi","Object","asyncToGenerator","regenerator_default","a","mark","_callee","listId","newName","res","wrap","_context","prev","next","axios","put","concat","UrlConfig","name","sent","abrupt","data","t0","console","log","stop","this","_x","_x2","apply","arguments","addListApi","_addListApi","_callee2","boardID","_context2","post","_x3","_x4","CardServices","getCardByIdApi","_getCardByIdApi","cardId","get","updateCardNameApi","_updateCardNameApi","addCardApi","_addCardApi","_callee3","_context3","_x5","CardOverview","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","textToTextInput","bind","assertThisInitialized","updateName","state","isNameUpdating","setState","props","card","_id","_this2","react_default","createElement","Segment","className","onClick","type","placeholder","onKeyPress","event","charCode","target","value","color","Component","connect","ownProps","cardReducer","cards","find","dispatch","_updateName","cardServices","payload","cardOverview","MyList","list","Container","List","map","Item","CardOverviewContainer","key","onKeyDown","keyCode","addCard","listReducer","lists","onwProps","updateListName","_updateListName","listServices","_addCard","NewList","addList","boardId","boardReducer","currentBoard","_addList","newList","Board","subscribe","fetchBoard","match","params","board","ListContainer","NewListContainer","socket","io","urlConfig","on","error","SocketService","emit","init","store","action","BoardServices","_fetchBoard","fetchBoards","_fetchBoards","actionBoardSubscribe","actionFetchingBoard","id","actionBoardsFetched","boards","socketService","_board","boardServices","BoardOverview","history","push","pathname","handleClick","ListBoards","BoardOverviewContainer","listBoards","createHistory","App","Router","Link","to","Switch","Route","exact","path","component","ListBoardContainer","BoardContainer","Boolean","window","location","hostname","defaultCardReducer","defaultBoardReducer","fetching","defaultListReducer","combineReducers","length","undefined","objectSpread","flatMap","toConsumableArray","ReactDOM","render","es","createStore","rootReducer","compose","applyMiddleware","thunk","__REDUX_DEVTOOLS_EXTENSION__","socketIO","configureStore","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.aaf83763.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","module.exports = {\n    API: process.env.REACT_APP_API_URL || \"http://localhost:5000/api\",\n    SOCKET: process.env.REACT_APP_SOCKET_URL || \"http://localhost:5000\"\n}","\nexport const basicHeader = {\n    'Access-Control-Allow-Origin': '*',\n}\n\nexport const tokenHeader = {\n    'Access-Control-Allow-Origin': '*',\n}","import axios from 'axios'\nimport UrlConfig from '../config/UrlConfig'\nimport { tokenHeader } from '../config/HeaderHelper'\n\nexport default {\n    async updateListNameApi(listId, newName) {\n        try {\n            const res = await axios.put(`${UrlConfig.API}/lists/${listId}`, {\n                name: newName\n            }, tokenHeader );\n            return res.data\n        } catch (err) {\n            console.log(err);\n            throw err\n        }\n    },\n    async addListApi(name, boardID){\n        try {\n            const res = await axios.post(`${UrlConfig.API}/lists`, {\n                name: name,\n                boardID: boardID\n            }, tokenHeader );\n            return res.data\n        } catch(error) {\n            throw error\n        }\n    }\n}","import axios from 'axios'\nimport UrlConfig from '../config/UrlConfig'\nimport { tokenHeader } from '../config/HeaderHelper'\n\nexport default {\n    async getCardByIdApi(cardId) {\n        try{\n            const res = await axios.get(`${UrlConfig.API}/cards/${cardId}`, tokenHeader)\n            return res.data\n        } catch (e) {\n            console.log(e)\n            throw e\n        }    \n    },\n    async updateCardNameApi(cardId, name) {\n        try {\n            const res = await axios.put(`${UrlConfig.API}/cards/${cardId}`, {\n                name: name\n            }, tokenHeader)\n            return res.data\n        } catch(error) {\n            throw error\n        }\n    },\n    async addCardApi(name, listId) {\n        try {\n            const res = await axios.post(`${UrlConfig.API}/cards`, {\n                name: name,\n                listId: listId\n            }, tokenHeader)\n            return res.data\n        } catch(error) {\n            throw error\n        }\n    }\n}","import React, { Component } from 'react';\nimport './CardOverview.css'\nimport { Segment, Container } from 'semantic-ui-react'\n\nclass CardOverview extends Component {\n\n    constructor(){\n        super()\n        this.textToTextInput = this.textToTextInput.bind(this)\n        this.updateName = this.updateName.bind(this)\n        this.state = {\n            isNameUpdating: false\n        }\n    }\n\n    componentDidMount(){\n    }\n\n    textToTextInput(){\n        this.setState({\n            isNameUpdating: true\n        })\n    }\n\n    updateName(name){\n        this.setState({\n            isNameUpdating: false\n        })\n        this.props.updateName(this.props.card._id, name)\n    }\n\n    render(){\n        return (\n            <Segment className='cardOverview'>\n                <p onClick={this.textToTextInput}>\n                    { !this.state.isNameUpdating ? this.props.card.name : <input type=\"text\" name=\"name\" placeholder= {this.props.card.name} onKeyPress={(event) => event.charCode === 13 ? this.updateName(event.target.value) : null}></input> }\n                </p>\n                <span className='pos' color=\"textSecondary\">\n                    adjective\n                </span>\n            </Segment>\n        )\n    }\n}\n\nexport default CardOverview\n","import cardOverview from '../../components/App/Card/CardOverview'\nimport { connect } from 'react-redux';\nimport { failedActionUpdateCardName } from '../../redux/actions/CardActions'\nimport cardServices from '../../services/CardServices'\n\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        card: state.cardReducer.cards.find(card => ownProps.cardId === card._id)\n    }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n    return {\n        async updateName(cardId, name) {\n            try {\n                await cardServices.updateCardNameApi(cardId, name)\n            } catch(error) {\n                console.log(error)\n                return dispatch(failedActionUpdateCardName(error))\n            }\n        }\n    }\n}\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(cardOverview);","export const actionUpdateCardName = (card) => {\n    return {\n        type: 'UPDATE_CARD_NAME',\n        payload: card\n    }\n}\n\nexport const failedActionUpdateCardName = (error) => {\n    return {\n        type: 'FAILED_UPDATE_CARD_NAME',\n        payload: error\n    }\n}\n\nexport const actionCardNameUpdated = (card) => {\n    return {\n        type: 'CARD_NAME_UPDATED',\n        payload: card\n    }\n}\n\nexport const actionGetCard = (card) => {\n    return {\n        type: 'GET_CARD',\n        payload: card\n    }\n}\n\nexport const failedActionGetCard = (error) => {\n    return {\n        type: 'FAILED_GET_CARD',\n        payload: error\n    }\n}\n\nexport const failedActionAddCard = (error) => {\n    return {\n        type: 'FAILED_ADD_CARD',\n        payload: error\n    }\n}","import React, { Component } from 'react';\nimport CardOverviewContainer from '../../../containers/CardContainers/CardOverviewContainer';\nimport { Segment, Container, List } from 'semantic-ui-react'\nimport './List.css'\n\nclass MyList extends Component {\n\n    render(){\n        return (\n            <Segment className='myList'>\n                {this.props.list.name}\n                <Container className='items'>\n                    <List >\n                        {this.props.list.cards.map(cardId => (\n                                <List.Item><CardOverviewContainer key={cardId} cardId={cardId}/></List.Item>\n                        ))}\n                    </List>\n                </Container>\n                <input onKeyDown={(event) => event.keyCode === 13 ? this.props.addCard(event.target.value, this.props.list._id) : null }></input>\n            </Segment>\n        )\n    }\n}\n\nexport default MyList","import { connect } from 'react-redux';\nimport listServices from '../../services/ListServices'\nimport cardServices from '../../services/CardServices'\nimport {actionUpdateListName, failedActionUpdateListName} from '../../redux/actions/ListActions'\nimport { failedActionAddCard } from '../../redux/actions/CardActions'\nimport list from '../../components/App/List/index'\n\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        list: state.listReducer.lists.find(list => list._id === ownProps.listId)\n    }\n};\n\nconst mapDispatchToProps = (dispatch, onwProps) => {\n    return {\n        async updateListName(list) {\n            try {\n                await listServices.updateListNameApi(list._id, list.name)\n            } catch(error) {\n                dispatch(failedActionUpdateListName(error))\n            }\n        },\n        async addCard(name, listId) {\n            try {\n                await cardServices.addCardApi(name, listId)\n            } catch(error) {\n                console.log(error)\n                return dispatch(failedActionAddCard(error))\n            }\n        }\n    }\n};\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(list);","export const actionUpdateListName = (list) => {\n    return {\n        type: 'UPDATE_LIST_NAME',\n        payload: list\n    }\n}\n\nexport const failedActionUpdateListName = (error) => {\n    return {\n        type: 'FAILED_UPDATE_LIST_NAME',\n        payload: error\n    }\n}\n\nexport const actionAddList = (list) => {\n    return {\n        type: 'ADD_LIST',\n        payload: list\n    }\n}\n\nexport const failedActionAddList = (error) => {\n    return {\n        type: 'FAILED_ADD_LIST',\n        payload: error\n    }\n}","import React, { Component } from 'react';\nimport { Segment, Container, List } from 'semantic-ui-react'\nimport './NewList.css'\n\nclass NewList extends Component {\n\n    render(){\n        return (\n            <Segment className='myList'>\n                <input placeholder=\"Create a new list\" onKeyDown={(event) => event.keyCode === 13 ? this.props.addList(event.target.value, this.props.boardId) : null }></input>\n            </Segment>\n        )\n    }\n}\n\nexport default NewList","import { connect } from 'react-redux';\nimport listServices from '../../services/ListServices'\nimport { failedActionAddList } from '../../redux/actions/ListActions'\nimport newList from '../../components/App/List/NewList'\n\nconst mapStateToProps = state => {\n    console.log(state.boardReducer.currentBoard._id)\n    return {\n        boardId: state.boardReducer.currentBoard._id\n    }\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        async addList(name, boardId) {\n            try {\n                await listServices.addListApi(name, boardId)\n            } catch(error) {\n                console.log(error)\n                dispatch(failedActionAddList(error))\n            }\n        }\n    }\n};\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(newList);","import React, { Component } from 'react';\nimport './Board.css'\nimport ListContainer from '../../../../containers/ListContainers/ListContainer';\nimport NewListContainer from '../../../../containers/ListContainers/NewListContainer';\nimport { List } from 'semantic-ui-react'\n\nclass Board extends Component {\n\n    componentWillMount(){\n        this.props.subscribe()\n        this.props.fetchBoard(this.props.match.params.boardId)\n    }\n\n    render(){\n        return (\n            <List className='board'>\n                { this.props.board.lists.map(listId => (\n                    <List.Item className='no-padding-top'><ListContainer key={listId} listId={listId}/></List.Item>\n                )) }\n                <List.Item className='no-padding-top'><NewListContainer /></List.Item>\n            </List>\n        );\n    }\n}\n\nexport default Board","\nimport io from 'socket.io-client';\nimport urlConfig from '../config/UrlConfig'\n\nconst socket = io(urlConfig.SOCKET)\n\nsocket.on(\"connect\", () => {\n    console.log(\"Connected !\")\n})\n\nsocket.on(\"error\", (error) => {\n    console.log(error)\n})\n\nexport default {\n    subscribe(boardId) {\n        socket.emit(\"subscribeToBoard\")\n    },\n    init( store ){\n        socket.on( \"action\", ( action ) => \n            store.dispatch(action) \n        )\n    },\n    emit( type, payload ) {\n        socket.emit( type, payload )\n    }\n}","import axios from 'axios'\nimport UrlConfig from '../config/UrlConfig'\nimport { tokenHeader } from '../config/HeaderHelper'\n\nexport default {\n    async fetchBoard(boardId) {\n        try{\n            const res = await axios.get(`${UrlConfig.API}/boards/${boardId}`, tokenHeader)\n            return res.data\n        } catch (e) {\n            console.log(e)\n            throw e\n        }    \n    },\n    async fetchBoards() {\n        try{\n            const res = await axios.get(`${UrlConfig.API}/boards`, tokenHeader)\n            return res.data\n        } catch (e) {\n            console.log(e)\n            throw e\n        }\n    }\n}","export const actionBoardSubscribe = (socket) => {\n    return {\n        type: 'BOARD_SUBSCRIBE',\n        payload: socket\n    }\n}\n\nexport const actionFetchingBoard = (id) => {\n    return {\n        type: 'FETCHING_BOARD',\n        payload: id\n    }\n}\n\nexport const actionFailedFetchBoard = (error) => {\n    return {\n        type: 'FAILED_FETCH_BOARD',\n        payload: error\n    }\n}\n\nexport const actionBoardFetched = (board) => {\n    return {\n        type: 'FETCHED_BOARD',\n        payload: board\n    }\n}\n\nexport const actionFetchingBoards = () => {\n    return {\n        type: 'FETCHING_BOARDS',\n        payload: null\n    }\n}\n\nexport const actionFailedFetchBoards = (error) => {\n    return {\n        type: 'FAILED_FETCH_BOARDS',\n        payload: error\n    }\n}\n\nexport const actionBoardsFetched = (boards) => {\n    return {\n        type: 'FETCHED_BOARDS',\n        payload: boards\n    }\n}","import board from '../../components/App/Board/Board/index'\nimport { connect } from 'react-redux';\nimport socketService from '../../services/SocketService'\nimport boardServices from '../../services/BoardServices'\nimport { actionBoardSubscribe, actionFetchingBoard, actionFailedFetchBoard, actionBoardFetched } from '../../redux/actions/BoardActions'\n\nconst mapStateToProps = state => {\n    console.log(\"refresh\")\n    return {\n        board: state.boardReducer.currentBoard\n    }\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        subscribe(){\n            socketService.subscribe()\n            dispatch(actionBoardSubscribe())\n        },\n        async fetchBoard(id){\n            try {\n                dispatch(actionFetchingBoard(id))\n                const board = await boardServices.fetchBoard(id)\n                dispatch(actionBoardFetched(board))\n            } catch(error) {\n                return dispatch(actionFailedFetchBoard(error))\n            }\n        }\n    }\n}\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(board);","import React, { Component } from 'react';\nimport '../../Card/CardOverview/CardOverview'\nimport {List, Segment} from 'semantic-ui-react'\n\nclass BoardOverview extends Component {\n\n    componentWillMount(){\n        this.props.subscribe()\n    }\n\n    handleClick(){\n        this.props.history.push({\n            pathname: '/boards/:boardId',\n            state: {\n                'boardId': this.props.board._id\n            }\n        })\n    }\n\n    render(){\n        return (\n            <Segment className='cardOverview'>\n                <button onClick={this.handleClick}>\n                    {this.props.board ? this.props.board.name: \"\"}\n                </button>\n            </Segment>\n        );\n    }\n}\n\nexport default BoardOverview","import BoardOverview from '../../components/App/Board/BoardOverview/BoardOverview'\nimport { connect } from 'react-redux';\nimport socketService from \"../../services/SocketService\";\nimport {actionBoardSubscribe} from \"../../redux/actions/BoardActions\";\n\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        board: state.boardReducer.boards.find(board => ownProps.boardId === board._id)\n    }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n    return {\n        subscribe(){\n            socketService.subscribe()\n            dispatch(actionBoardSubscribe())\n        }\n    }\n}\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(BoardOverview);","import React, {Component} from 'react';\nimport '../Board/Board.css'\nimport BoardOverviewContainer from '../../../../containers/BoardContainer/BoardOverviewContainer'\nimport {List} from 'semantic-ui-react'\n\nclass ListBoards extends Component {\n\n    componentWillMount() {\n        this.props.subscribe()\n        this.props.fetchBoards()\n    }\n\n    render() {\n        return (\n            <List className='board'>\n                {this.props.boards.map(boardId => (\n                    <List.Item className='no-padding-top'><BoardOverviewContainer key={boardId} boardId={boardId}/>\n                    </List.Item>\n                ))}\n            </List>\n        );\n    }\n}\n\nexport default ListBoards","import { connect } from 'react-redux';\nimport socketService from '../../services/SocketService'\nimport boardServices from '../../services/BoardServices'\nimport listBoards from '../../components/App/Board/ListBoards/ListBoards'\nimport { actionBoardSubscribe, actionFetchingBoards, actionFailedFetchBoards, actionBoardsFetched } from '../../redux/actions/BoardActions'\n\nconst mapStateToProps = state => {\n    return {\n        boards: state.boardReducer.boards\n    }\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        subscribe(){\n            socketService.subscribe()\n            dispatch(actionBoardSubscribe())\n        },\n        async fetchBoards(){\n            try {\n                dispatch(actionFetchingBoards())\n                const boards = await boardServices.fetchBoards()\n                dispatch(actionBoardsFetched(boards))\n            } catch(error) {\n                return dispatch(actionFailedFetchBoards(error))\n            }\n        }\n    }\n}\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(listBoards);","import React, { Component } from \"react\";\nimport { Router, Route, Switch, Link } from \"react-router-dom\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport createHistory from \"history/createBrowserHistory\";\nimport BoardContainer from './containers/BoardContainer/BoardContainer';\nimport ListBoardContainer from \"./containers/BoardContainer/ListBoardContainer\";\n\nconst history = createHistory();\n\nclass App extends Component {\n  render() {\n    return (\n      <Router history={history}>\n        <div className=\"App\">\n          <Link to=\"/login\">Home</Link> <Link to=\"/\">About</Link> <Link to=\"/contact\">Contact</Link> <Link to=\"/boards\">Boards</Link> <Link to=\"/boards/board1\">Board</Link>\n          <Switch>\n            <Route exact path=\"/login\"  />\n              <Route exact path=\"/boards\"  component={ListBoardContainer} />\n            <Route exact path=\"/boards/:boardId\" component={BoardContainer} />\n            <Route path=\"\">\n              <div>\n                <p className=\"App-intro\">Salut</p>\n              </div>\n            </Route>\n          </Switch>\n        </div>\n      </Router>\n    );\n  }\n}\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const defaultCardReducer = {\n  cards: []\n}\n\nexport default (state = defaultCardReducer, action) => {\n  switch (action.type) {\n    case \"FETCHED_BOARD\":\n      const board = action.payload\n      return {\n          ...state,\n          cards: board.lists.flatMap(list => list.cards) \n      }\n    case 'GET_CARD':\n      return {\n        ...state,\n        card: action.payload.payload,\n        error: null\n      }\n    case 'FAILED_GET_CARD':\n      return {\n        ...state,\n        error: action.payload\n      }\n    case 'ADD_CARD':\n      const card = action.payload\n      return {\n          ...state,\n          cards: [...state.cards, card]\n          \n      }\n    case 'UPDATE_CARD_NAME':\n        return {\n            ...state,\n            cards: state.cards.map(card => card._id === action.payload._id ? action.payload : card)\n        }\n    default:\n      return state\n  }\n}","const defaultBoardReducer = {\n    fetching: false,\n    currentBoard: {\n        _id: \"\",\n        name: \"\",\n        lists: []\n    },\n    boards: [{\n        _id: 'board1',\n        name: 'tata'\n    },{\n        _id: 'board2',\n        name: 'toto'\n    }\n    ]\n}\n\nexport default (state = defaultBoardReducer, action) => {\n    switch (action.type) {\n        case \"FETCHED_BOARD\":\n            const board = action.payload\n            return {\n                ...state,\n                currentBoard: {\n                    ...board,\n                    lists: board.lists.map(list => list._id)\n                }\n            }\n        case \"FETCHING_BOARD\":\n            return {\n                ...state,\n                fetching: true\n            }\n        case \"FETCHED_BOARDS\":\n            return {\n                ...state,\n                boards: [...action.payload]\n            }\n        case \"FETCHING_BOARDS\":\n            return {\n                ...state,\n                fetching: true\n            }\n        case 'BOARD_SUBSCRIBE':\n            return {\n                ...state\n            }\n        case 'GET_BOARD':\n            return {\n                ...state,\n                currentBoard: action.payload,\n                error: null\n            }\n        case 'FAILED_GET_BOARD':\n            return {\n                ...state,\n                error: action.payload\n            }\n        case 'FAILED_GET_BOARDS':\n            return {\n                ...state,\n                error: action.payload\n            }\n        case 'ADD_LIST':\n            const list = action.payload\n            return {\n                ...state,\n                currentBoard: {\n                    ...state,\n                    lists: [...state.currentBoard.lists, list._id]}\n            }\n        case 'FAILED_UPDATE_LIST_NAME':\n            return {\n                ...state,\n                error: action.payload\n            }\n        default:\n            return state\n    }\n}","const defaultListReducer = {\n    lists: []\n}\n\nexport default (state = defaultListReducer, action) => {\n    switch (action.type) {\n        case \"FETCHED_BOARD\":\n            const board = action.payload\n            const lists = board.lists.map(list => ({\n                ...list,\n                cards: list.cards.map(card => card._id)\n            }))\n            return {\n                ...state,\n                lists: lists\n            }\n        case 'ADD_CARD':\n            const card = action.payload\n            return {\n                ...state,\n                lists: state.lists.map(list => card.list === list._id ? {\n                    ...list,\n                    cards: [ ...list.cards, card._id ]\n                 } : list)\n                \n            }\n        case 'ADD_LIST':\n            const list = action.payload\n            return {\n                ...state,\n                lists: [ ...state.lists, {\n                    ...list,\n                    cards: []\n                }]\n            }\n        default:\n            return {\n                ...state\n            }\n    }\n}","import {combineReducers} from 'redux';\nimport cardReducer from './CardReducer';\nimport boardReducer from './BoardReducer';\nimport listReducer from './ListReducer';\n\nexport default combineReducers({\n cardReducer,\n boardReducer,\n listReducer\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux'\nimport configureStore from './redux/store'\nimport 'semantic-ui-css/semantic.min.css';\n\nReactDOM.render(\n    <Provider store={configureStore()}>\n        <App />\n    </Provider>, \n document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers/RootReducer';\nimport socketIO from '../services/SocketService'\n\nexport default function configureStore(initialState={}) {\n const store = createStore(\n  rootReducer, \n  compose(applyMiddleware(thunk), window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()) \n );\n socketIO.init(store)\n return store\n}"],"sourceRoot":""}